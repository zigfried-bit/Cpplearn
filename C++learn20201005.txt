2020/10/5 21：22
C++变量和基本类型
1、
指向指针的引用定义：int *&r = p;
如何理解这种形式呢？
首先定义的是引用，引用的数据类型是“指针”，指针是指向int的指针。
int* &p{p};这样看起来好理解一些，int*代表引用的数据类型是“指向int的指针类型”。

2、对常量的引用
首先，引用不是一个对象，引用所绑定的对象可以是常量也可以是变量，但两者的绑定关系是不能轻易改变的。
所以，引用本身从某种角度说是“常量”。
引用的对象是常量还是非常量都不会影响引用和对象的绑定关系。

3、引用类型必须与其所引用对象的类型一致，但有两个例外。
（1 在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。
	例：double dval = 3.14;
		const int &ri{dval};
	为了确保让ri绑定一个整数，编译器把上述代码变成如下形式：
		const int temp = dval;
		const int &ri = temp;
	由双精度浮点数生成一个临时整型常量；这涉及到类型转换的知识。
	结果就是，ri实际绑定的是temp！
	这样的话，对常量的引用除了改个名字，有什么用呢？？？
	
4、对const的引用可能引用一个并非const的对象。what？？？
那我的temp呢？？？
	可能的解释：当const int的引用对int类型进行引用时，常量引用仅对引用可参与的操作做出了限定，
对于引用对象是不是常量未作限定，int还是int。
				当const int的引用对double类型进行引用时，这是会有一个temp作为const int被引用，和double没有关系。
同时还会产生warning。
理解这个意思就行，实际用到的可能性也不大。

5、指针类型必须与其所指的对象的类型一致，但是有2个例外。
第一种例外情况是允许一个指向常量的指针指向非常量。
与常量引用的情况类似，指向常量的指针仅仅要求不能通过该指针改变对象的值，而没有规定那个对象的值不能通过
其它途径改变。

6、常量指针
之前定义指针是：int *p{i};
现在定义指针是：int *const p{i};
*const p是一个整体，来说明p是个常量指针。
如果是指向常量的常量指针。。。。那就是：const int *const p{i};别被绕晕了。

7、关于顶层const和底层const
用于声明引用的const都是底层const，因为引用不是对象，没有顶层const一说。
当执行对象的拷贝操作时，顶层const不受影响，因为拷贝操作不影响被拷贝对象的值。
拷入拷出对象必须具有相同的底层const资格，或者两数据类型可以转换（一般来说，非常量可以转换成常量）

8、常量表达式
const int sz = get_size(); sz就不是一个常量表达式，因为它的具体值直到运行才能获取到，而不是在编译时。

在constexpr声明中如果定义了一个指针，限定符constexpr仅对指针有效，与指针所指对象无关。what？？？
const int i = 0;//i是个整型常量；
constexpr int i = 0;//i是个整型常量；

const int *p = nullptr;//p是个指向整型常量的指针；
int *const q = nullptr;//q是个指向整型变量的常量指针；
constexpr int *q = nullptr;//q是个指向整型变量的常量指针；
这。。。。。。

constexpr把它所定义的对象置为了顶层const。
那constexpr“修饰”的就不是int，而是*q，那不应该写成int constexpr *q，
这不就和int const *q一个意思了吗？所以说，要把constexpr看作是声明，放在最前面。

const int a1 = b1;
constexpr int a2 = b2;
a1,a2均是整型常量，区别在于b1可以是非常量，可以拷贝即可；b2必须是常量表达式。

9、处理类型

typedef double *p; //p是double*的同义词 
emmm。。。。。。让我好好理解下
应该可以写成：typedef double* p;//p相当于double * 
这样稍微好理解些。
还可以写成：typedef double * p;
这就更好了！

也可以使用关键字using：using p = double *;

来个绕人的栗子：
typedef char * pstring;
const pstring cstr = 0;

正常的思路翻译一下：const char *cstr = 0;//定义了一个指向字符常量的指针。
完全错误！ what？？？
实际上是定义了一个指向char的常量指针，怎么样，惊不惊喜？
正确的翻译：char *const cstr =0;
关键就是理解const到底是修饰谁？const修饰的是指针！
接着来：
const pstring *ps;
const修饰的是指针，那就是定义了一个指向常量指针的指针。
翻译一下：char *const *ps; 这样对吗？验证应该是对的。
有个大胆的想法：char *const *const ps;这应该是定义了一个指向常量指针的常量指针吧。。。。。。

第二天，考虑一下：typedef const char * pstring;是什么意思呢？
意思是，pstring定义一个指针指向字符常量。

这部分应该可以了。

10、“设置一个类型为auto的引用时，初始值中的顶层常量属性仍然保留。
和往常一样，如果我们给初始值绑定一个引用，则此时的常量就不是顶层常量了。”
什么意思？？？一点也看不懂。。。。。。
CSDN查一下，还真的有！！！

“
设置一个为auto的引用，初始值中的顶层常量属性仍然保存。如果我们给初始值绑定一个引用,此时常量就不是顶层常量了

const int a = 2；

auto &b = a;

被误导这句话有什么弦外之音，根本就没有。

第一句话意思是强调a 的顶层const属性一直都在，后面将b 绑定到 a上后，b是没有a的这个常量属性，a的顶层常量属性还是都在滴。翻译确实有点难理解。

总结出来就是auto保留底层const属性没有保留顶层const属性。
”
转载自Akahieveman

看不懂的原因是翻译问题，大概。。。。。。

理解之后发现这话，不明所以。

11、decltype类型指示符
看了半天decltype的定义和代码，我才反应过来“decltype(f()) sum = x;”是在干嘛。。。。。。
就是因为不清楚decltype的类型，才用的decltype(f())来代替那个“未知类型”。

int a{0}, &ref{a};
decltype(ref) b = 10;
分析一下上面的代码：首先判断decltype(ref)的类型是什么。根据以往的经验，ref只是a的别名而已，
因此，decltype(ref)应该是int类型。
是的，我们又错了，实际上，decltype(ref)是int&，是引用类型！！！
其次，10是个字面值常量，int&不能引用常量，因此，代码是错误的。
当然，如果decltype( ref+0 )，那就是int了，反应过来了吗？

int a{0}, *p{&a};
decltype(*p) b = a;
解引用操作后对应的类型为引用！！！

最后注意，decltype((variable))的结果永远是引用！！！
终于结束了。。。。。。